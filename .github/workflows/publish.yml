name: Publish

env:
  NUGET_OUTPUT: ./Artifacts/NuGet 
  DOTNET_VERSION: "8.0.x"
  NODE_VERSION: "21.x"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: '0.0.0'
        type: string
      release-notes:
        description: 'Release notes'
        required: true
        default: 'No release notes'
        type: string
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
  pull_request:
    types: [closed]
    branches:
      - "**"
    paths:
      - "**"

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.version }}
      publish: ${{ steps.release.outputs.should-publish }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Release
        id: release
        uses: cratis/release-action@v1
        with:
          version: ${{ github.event.inputs.version }}
          release-notes: ${{ github.event.inputs.release-notes }}

  publish-dotnet-packages:
    if: needs.release.outputs.publish == 'true'
    runs-on: ubuntu-latest
    needs: [release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .Net
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Remove any existing artifacts
        run: rm -rf ${{ env.NUGET_OUTPUT }}

      - name: Build
        run: dotnet build --configuration Release

      - name: Create NuGet packages
        run: dotnet pack --no-build --configuration Release -o ${{ env.NUGET_OUTPUT }} -p:PackageVersion=${{ needs.release.outputs.version }}

      - name: Push NuGet packages
        run: dotnet nuget push --skip-duplicate '${{ env.NUGET_OUTPUT }}/*.nupkg' --timeout 900 --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

  publish-npm-packages:
    if: needs.release.outputs.publish == 'true'
    runs-on: ubuntu-latest
    needs: [release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: |
            .yarn/cache
            **/node_modules
            **/.eslintcache
            **/yarn.lock
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/package.json') }}
  
      - name: Yarn install
        run: yarn

      - name: Publish NPM packages
        run: |
          yarn publish-version ${{ needs.release.outputs.version }}

      - name: Git reset (package.json files changed)
        run: |
          git reset --hard
